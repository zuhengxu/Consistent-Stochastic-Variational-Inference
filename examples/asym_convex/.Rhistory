install.packages("latex2exp")
F = function(n,y){
X = rnorm(n)
return(y^2+mean(X)*cos(5*y))
}
X = seq(-1,1,0.01)
ss = c(5,50,100,1000)
par(mfrow = c(3,4))
### generate plots for different n, each I generate 3 plot
j=1
repeat{
for(i in 1:4) {plot(X, F(ss[i], X),col="black", type = "l", ylab = TeX("f_n(y)"), xlab = "y") }
j=j+1; print(j)
if ( j == 4) {break}
}
library(latex2exp)
### generate plots for different n, each I generate 3 plot
j=1
repeat{
for(i in 1:4) {plot(X, F(ss[i], X),col="black", type = "l", ylab = TeX("f_n(y)"), xlab = "y") }
j=j+1; print(j)
if ( j == 4) {break}
}
j=1
repeat{
for(i in 1:4) {plot(X, F(ss[i], X),col="black", type = "l", ylab = TeX("f_n(y)"), xlab = "y") }
j=j+1; print(j)
if ( j == 4) {break}
}
j=1
repeat{
for(i in 1:4) {plot(X, F(ss[i], X),col="black", type = "l", ylab = TeX("f_n(y)"), xlab = "y") }
j=j+1; print(j)
if ( j == 4) {break}
}
j=1
repeat{
for(i in 1:4) {plot(X, F(ss[i], X),col="black", type = "l", ylab = TeX("f_n(y)"), xlab = "y") }
j=j+1; print(j)
if ( j == 4) {break}
}
j=1
repeat{
for(i in 1:4) {plot(X, F(ss[i], X),col="black", type = "l", ylab = TeX("f_n(y)"), xlab = "y") }
j=j+1; print(j)
if ( j == 4) {break}
}
j=1
repeat{
for(i in 1:4) {plot(X, F(ss[i], X),col="black", type = "l", ylab = TeX("f_n(y)"), xlab = "y") }
j=j+1; print(j)
if ( j == 4) {break}
}
j=1
repeat{
for(i in 1:4) {plot(X, F(ss[i], X),col="black", type = "l", ylab = TeX("f_n(y)"), xlab = "y") }
j=j+1; print(j)
if ( j == 4) {break}
}
####Example 4.1 asymptotic invex function
F = function(n,y){
X = rnorm(n)
return(y^2+mean(X)*cos(5*y))
}
library(ggplot2)
library(tidyverse)
X = seq(-1,1,0.01)
ss = c(5,50,100,1000)
par(mfrow = c(3,4))
### generate plots for different n, each I generate 3 plot
j=1
repeat{
for(i in 1:4) {plot(X, F(ss[i], X),col="black", type = "l", ylab = "F(y)", xlab = "y") }
j=j+1; print(j)
if ( j == 4) {break}
}
### generate plots for different n, 3plots for each setting
j=1
repeat{
for(i in 1:4) {plot(X, F(ss[i], X),col="black", type = "l", ylab = "fn(y)", axes = FALSE) }
j=j+1
if ( j == 4) {break}
}
par(mfrow = c(3,4))
### generate plots for different n, 3plots for each setting
j=1
repeat{
for(i in 1:4) {plot(X, F(ss[i], X),col="black", type = "l", ylab = "fn(y)", axes = FALSE) }
j=j+1
if ( j == 4) {break}
}
par(mfrow = c(3,4))
### generate plots for different n, 3plots for each setting
j=1
repeat{
for(i in 1:4) {plot(X, F(ss[i], X),col="black", type = "l", ylab = "fn(y)") }
j=j+1
if ( j == 4) {break}
}
par(mfrow = c(3,4))
### generate plots for different n, 3plots for each setting
j=1
repeat{
for(i in 1:4) {plot(X, F(ss[i], X),col="black", type = "l", ylab = "fn(y)", xlab = "") }
j=j+1
if ( j == 4) {break}
}
### generate plots for different n, 3plots for each setting
j=1
repeat{
for(i in 1:4) {plot(X, F(ss[i], X),col="black", type = "l", ylab = "fn(y)", xlab = "") }
j=j+1
if ( j == 4) {break}
}
### generate plots for different n, 3plots for each setting
j=1
set.seed(2021)
repeat{
for(i in 1:4) {plot(X, F(ss[i], X),col="black", type = "l", ylab = "fn(y)", xlab = "") }
j=j+1
if ( j == 4) {break}
}
### generate plots for different n, 3plots for each setting
j=1
set.seed(2021)
repeat{
for(i in 1:4) {plot(X, F(ss[i], X),col="black", type = "l", ylab = "fn(y)", xlab = "") }
j=j+1
if ( j == 4) {break}
}
### generate plots for different n, 3plots for each setting
j=1
set.seed(20210327)
repeat{
for(i in 1:4) {plot(X, F(ss[i], X),col="black", type = "l", ylab = "fn(y)", xlab = "") }
j=j+1
if ( j == 4) {break}
}
### generate plots for different n, 3plots for each setting
j=1
set.seed(202103)
repeat{
for(i in 1:4) {plot(X, F(ss[i], X),col="black", type = "l", ylab = "fn(y)", xlab = "") }
j=j+1
if ( j == 4) {break}
}
### generate plots for different n, 3plots for each setting
j=1
set.seed(202103)
repeat{
for(i in 1:4) {plot(X, F(ss[i], X),col="black", type = "l", ylab = "fn(y)", xlab = "") }
j=j+1
if ( j == 4) {break}
}
### generate plots for different n, 3plots for each setting
j=1
set.seed(202103)
repeat{
for(i in 1:4) {
plot(X, F(ss[i], X),col="black", type = "l", ylab = "fn", xlab = "",
title = paste('n =', ss[j]) ) }
j=j+1
if ( j == 4) {break}
}
paste('n =', ss[1])
warnings
warnings()
par(mfrow = c(3,4))
### generate plots for different n, 3plots for each setting
j=1
set.seed(202103)
repeat{
for(i in 1:4) {
plot(X, F(ss[i], X),col="black", type = "l", ylab = "fn", xlab = "",
main = paste('n =', ss[j]) ) }
j=j+1
if ( j == 4) {break}
}
### generate plots for different n, 3plots for each setting
j=1
set.seed(202103)
repeat{
for(i in 1:4) {
plot(X, F(ss[i], X),col="black", type = "l", ylab = "fn", xlab = "",
xaxt = 'n', main = paste('n =', ss[j]) ) }
j=j+1
if ( j == 4) {break}
}
### generate plots for different n, 3plots for each setting
j=1
set.seed(202103)
repeat{
for(i in 1:4) {
plot(X, F(ss[i], X),col="black", type = "l", ylab = "fn", xlab = "",
xaxt = 'n', yaxt = "n", main = paste('n =', ss[j]) ) }
j=j+1
if ( j == 4) {break}
}
install.packages("latex2exp")
library(latex2exp)
### generate plots for different n, 3plots for each setting
j=1
set.seed(202103)
repeat{
for(i in 1:4) {
plot(X, F(ss[i], X),col="black", type = "l", ylab = TeX('f_\\n') , xlab = "",
xaxt = 'n',  main = paste('n =', ss[j]) ) }
j=j+1
if ( j == 4) {break}
}
par(mfrow = c(3,4))
### generate plots for different n, 3plots for each setting
j=1
set.seed(202103)
repeat{
for(i in 1:4) {
plot(X, F(ss[i], X),col="black", type = "l", ylab = TeX('f_\n') , xlab = "",
xaxt = 'n',  main = paste('n =', ss[j]) ) }
j=j+1
if ( j == 4) {break}
}
### generate plots for different n, 3plots for each setting
j=1
set.seed(202103)
repeat{
for(i in 1:4) {
plot(X, F(ss[i], X),col="black", type = "l", ylab = TeX('$f_n$') , xlab = "",
xaxt = 'n',  main = paste('n =', ss[j]) ) }
j=j+1
if ( j == 4) {break}
}
### generate plots for different n, 3plots for each setting
j=1
set.seed(202103)
repeat{
for(i in 1:4) {
plot(X, F(ss[i], X),col="black", type = "l", ylab = TeX('$f_n$') , xlab = "",
xaxt = 'n',  main = paste('n =', ss[j]), cex.lab = 2. ) }
j=j+1
if ( j == 4) {break}
}
### generate plots for different n, 3plots for each setting
j=1
set.seed(202103)
repeat{
for(i in 1:4) {
plot(X, F(ss[i], X),col="black", type = "l", ylab = 'fn' , xlab = "",
xaxt = 'n',  main = paste('n =', ss[j]), cex.lab = 2. ) }
j=j+1
if ( j == 4) {break}
}
### generate plots for different n, 3plots for each setting
j=1
set.seed(202103)
repeat{
for(i in 1:4) {
plot(X, F(ss[i], X),col="black", type = "l", ylab = '' , xlab = "",
xaxt = 'n', yaxt='n', main = paste('n =', ss[j]), cex.lab = 2. ) }
j=j+1
if ( j == 4) {break}
}
### generate plots for different n, 3plots for each setting
j=1
set.seed(202103)
repeat{
for(i in 1:4) {
plot(X, F(ss[i], X),col="black", type = "l", ylab = '' , xlab = "",
xaxt = 'n', yaxt='n', main = paste('fn , n =', ss[j]), cex.lab = 2. ) }
j=j+1
if ( j == 4) {break}
}
### generate plots for different n, 3plots for each setting
j=1
set.seed(202103)
repeat{
for(i in 1:4) {
plot(X, F(ss[i], X),col="black", type = "l", ylab = '' , xlab = "",
xaxt = 'n', yaxt='n', main = paste(TeX('$f_n$'), ss[j]), cex.lab = 2. ) }
j=j+1
if ( j == 4) {break}
}
### generate plots for different n, 3plots for each setting
j=1
set.seed(202103)
repeat{
for(i in 1:4) {
plot(X, F(ss[i], X),col="black", type = "l", ylab = '' , xlab = "",
xaxt = 'n', yaxt='n', main = paste('fn , n =', ss[j]), cex.lab = 2. ) }
j=j+1
if ( j == 4) {break}
}
### generate plots for different n, 3plots for each setting
j=1
set.seed(202103)
repeat{
for(i in 1:4) {
plot(X, F(ss[i], X),col="black", type = "l", ylab = '' , xlab = "",
xaxt = 'n', yaxt='n', main = paste('fn , n =', ss[j]), cex.main = 2. ) }
j=j+1
if ( j == 4) {break}
}
### generate plots for different n, 3plots for each setting
j=1
set.seed(202103)
repeat{
for(i in 1:4) {
plot(X, F(ss[i], X),col="black", type = "l", ylab = '' , xlab = "",
xaxt = 'n', yaxt='n', main = paste('fn , n =', ss[j]), cex.main = 2.5 ) }
j=j+1
if ( j == 4) {break}
}
par(mfrow = c(3,4))
### generate plots for different n, 3plots for each setting
j=1
set.seed(202103)
repeat{
for(i in 1:4) {
plot(X, F(ss[i], X),col="black", type = "l", ylab = '' , xlab = "",
xaxt = 'n', yaxt='n', main = paste('fn , n =', ss[i]), cex.main = 2.5 ) }
j=j+1
if ( j == 4) {break}
}
